// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.16");

            modelBuilder.Entity("Domain.ActorShowRole", b =>
                {
                    b.Property<string>("ActorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShowId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Pay")
                        .HasColumnType("REAL");

                    b.HasKey("ActorId", "RoleId", "ShowId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ShowId");

                    b.ToTable("ActorShowRoles");
                });

            modelBuilder.Entity("Domain.ActorShowRoleAudition", b =>
                {
                    b.Property<string>("ActorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuditionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShowRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("ActorId", "AuditionId", "ShowRoleId");

                    b.HasIndex("AuditionId");

                    b.HasIndex("ShowRoleId");

                    b.ToTable("ActorShowRoleAuditions");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Audition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoURL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Auditions");
                });

            modelBuilder.Entity("Domain.AuditionReview", b =>
                {
                    b.Property<Guid>("AuditionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Review")
                        .HasColumnType("REAL");

                    b.HasKey("AuditionId", "ReviewerId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("AuditionReviews");
                });

            modelBuilder.Entity("Domain.Festival", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OrganizerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ZipCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Festivals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cfa698f-516f-451b-80d7-c4a70e7b05ad"),
                            City = "Beograd",
                            EndDate = new DateTime(2023, 9, 3, 12, 0, 54, 145, DateTimeKind.Utc).AddTicks(5510),
                            Name = "Festival 1",
                            StartDate = new DateTime(2023, 8, 3, 12, 0, 54, 145, DateTimeKind.Utc).AddTicks(5491),
                            ZipCode = 36300
                        },
                        new
                        {
                            Id = new Guid("0420255b-52a9-442c-81ed-b2626685b561"),
                            City = "Beograd",
                            EndDate = new DateTime(2023, 11, 3, 12, 0, 54, 145, DateTimeKind.Utc).AddTicks(5554),
                            Name = "Festival 2",
                            StartDate = new DateTime(2023, 10, 3, 12, 0, 54, 145, DateTimeKind.Utc).AddTicks(5539),
                            ZipCode = 36300
                        },
                        new
                        {
                            Id = new Guid("52ea9009-7d82-4f17-98f4-98d6e505a4c3"),
                            City = "Beograd",
                            EndDate = new DateTime(2024, 1, 3, 12, 0, 54, 145, DateTimeKind.Utc).AddTicks(5592),
                            Name = "Festival 3",
                            StartDate = new DateTime(2023, 12, 3, 12, 0, 54, 145, DateTimeKind.Utc).AddTicks(5577),
                            ZipCode = 36300
                        },
                        new
                        {
                            Id = new Guid("a3d23763-d578-4d41-addd-b5dd984ec5e6"),
                            City = "Beograd",
                            EndDate = new DateTime(2024, 3, 3, 12, 0, 54, 145, DateTimeKind.Utc).AddTicks(5631),
                            Name = "Festival 4",
                            StartDate = new DateTime(2024, 2, 3, 12, 0, 54, 145, DateTimeKind.Utc).AddTicks(5621),
                            ZipCode = 36300
                        },
                        new
                        {
                            Id = new Guid("88cd79ac-60e9-4c11-ac24-318b75c19748"),
                            City = "Beograd",
                            EndDate = new DateTime(2024, 5, 3, 12, 0, 54, 145, DateTimeKind.Utc).AddTicks(5746),
                            Name = "Festival 5",
                            StartDate = new DateTime(2024, 4, 3, 12, 0, 54, 145, DateTimeKind.Utc).AddTicks(5731),
                            ZipCode = 36300
                        });
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Domain.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FestivalId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LengthOfPlay")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TheatreShowScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TimeOfPlay")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.HasIndex("TheatreShowScheduleId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Show", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectorName")
                        .HasColumnType("TEXT");

                    b.Property<int>("LengthOfPlay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoryWriterName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("Domain.ShowFestivalApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FestivalId")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfActors")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ShowId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TheatreId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.HasIndex("ShowId");

                    b.HasIndex("TheatreId");

                    b.ToTable("ShowFestivalApplications");
                });

            modelBuilder.Entity("Domain.ShowFestivalApplicationReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Acceptable")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("FestivalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShowFestivalApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShowId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("ShowFestivalApplicationId");

                    b.HasIndex("ShowId");

                    b.ToTable("ShowFestivalApplicationReviews");
                });

            modelBuilder.Entity("Domain.ShowRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShowId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShowId");

                    b.ToTable("ShowRoles");
                });

            modelBuilder.Entity("Domain.Theatre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManagerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("YearOfCreation")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.ToTable("Theatres");
                });

            modelBuilder.Entity("Domain.TheatreShow", b =>
                {
                    b.Property<Guid>("TheatreId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShowId")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfActors")
                        .HasColumnType("INTEGER");

                    b.HasKey("TheatreId", "ShowId");

                    b.HasIndex("ShowId");

                    b.ToTable("TheatreShows");
                });

            modelBuilder.Entity("Domain.TheatreShowSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShowId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TheatreId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShowId");

                    b.HasIndex("TheatreId");

                    b.ToTable("TheatreShowSchedules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.ActorShowRole", b =>
                {
                    b.HasOne("Domain.AppUser", "Actor")
                        .WithMany("ActingRoles")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ShowRole", "Role")
                        .WithMany("RoleActors")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Show", "Show")
                        .WithMany("Actors")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Role");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Domain.ActorShowRoleAudition", b =>
                {
                    b.HasOne("Domain.AppUser", "Actor")
                        .WithMany("Auditions")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Audition", "Audition")
                        .WithMany("Auditioners")
                        .HasForeignKey("AuditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ShowRole", "ShowRole")
                        .WithMany("ShowRoleAuditions")
                        .HasForeignKey("ShowRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Audition");

                    b.Navigation("ShowRole");
                });

            modelBuilder.Entity("Domain.AuditionReview", b =>
                {
                    b.HasOne("Domain.Audition", "Audition")
                        .WithMany("Reviews")
                        .HasForeignKey("AuditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Reviewer")
                        .WithMany("AuditionReviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audition");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Domain.Festival", b =>
                {
                    b.HasOne("Domain.Theatre", "Organizer")
                        .WithMany("FestivalsOrganized")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("Domain.Schedule", b =>
                {
                    b.HasOne("Domain.Festival", "Festival")
                        .WithMany("ShowSchedules")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TheatreShowSchedule", "TheatreShow")
                        .WithMany("Schedules")
                        .HasForeignKey("TheatreShowScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Festival");

                    b.Navigation("TheatreShow");
                });

            modelBuilder.Entity("Domain.ShowFestivalApplication", b =>
                {
                    b.HasOne("Domain.Festival", "Festival")
                        .WithMany()
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Show", "Show")
                        .WithMany("Applications")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Theatre", "Theatre")
                        .WithMany()
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Festival");

                    b.Navigation("Show");

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("Domain.ShowFestivalApplicationReview", b =>
                {
                    b.HasOne("Domain.Festival", null)
                        .WithMany("ShowApplications")
                        .HasForeignKey("FestivalId");

                    b.HasOne("Domain.AppUser", "Reviewer")
                        .WithMany("ShowApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("Domain.ShowFestivalApplication", "Application")
                        .WithMany("Reviews")
                        .HasForeignKey("ShowFestivalApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Show", null)
                        .WithMany("ApplicationReviews")
                        .HasForeignKey("ShowId");

                    b.Navigation("Application");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Domain.ShowRole", b =>
                {
                    b.HasOne("Domain.Show", "Show")
                        .WithMany()
                        .HasForeignKey("ShowId");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Domain.Theatre", b =>
                {
                    b.HasOne("Domain.AppUser", "Manager")
                        .WithOne("ManagedTheatre")
                        .HasForeignKey("Domain.Theatre", "ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Domain.TheatreShow", b =>
                {
                    b.HasOne("Domain.Show", "Show")
                        .WithMany("Theatres")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Theatre", "Theatre")
                        .WithMany("Shows")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("Domain.TheatreShowSchedule", b =>
                {
                    b.HasOne("Domain.Show", "Show")
                        .WithMany("TheatreSchedules")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Theatre", "Theatre")
                        .WithMany("ShowSchedules")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Navigation("ActingRoles");

                    b.Navigation("AuditionReviews");

                    b.Navigation("Auditions");

                    b.Navigation("ManagedTheatre");

                    b.Navigation("Photos");

                    b.Navigation("ShowApplications");
                });

            modelBuilder.Entity("Domain.Audition", b =>
                {
                    b.Navigation("Auditioners");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Festival", b =>
                {
                    b.Navigation("ShowApplications");

                    b.Navigation("ShowSchedules");
                });

            modelBuilder.Entity("Domain.Show", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("ApplicationReviews");

                    b.Navigation("Applications");

                    b.Navigation("TheatreSchedules");

                    b.Navigation("Theatres");
                });

            modelBuilder.Entity("Domain.ShowFestivalApplication", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.ShowRole", b =>
                {
                    b.Navigation("RoleActors");

                    b.Navigation("ShowRoleAuditions");
                });

            modelBuilder.Entity("Domain.Theatre", b =>
                {
                    b.Navigation("FestivalsOrganized");

                    b.Navigation("ShowSchedules");

                    b.Navigation("Shows");
                });

            modelBuilder.Entity("Domain.TheatreShowSchedule", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
